#Task 1-3
# setwd("D:/Edinburgh University/ESP/Work/") ## comment out of submitted
a <- scan("D:\\work\\UoE\\Extended Stat Programming\\Practice1\\4300-0.txt",what="character",skip=73,nlines=32858-73)
a <- gsub("_(","",a,fixed=TRUE) ## remove "_("
#Task 1-3
# setwd("D:/Edinburgh University/ESP/Work/") ## comment out of submitted
a <- scan("4300-0.txt",what="character",skip=73,nlines=32858-73)
#Task 4
# The function of split_punct for separate punctuation marks
split_punct<-function(punctuation){
# Get the location of punctuation in a
location<-grep(punctuation,a,fixed = TRUE)
# Create new vector to store separated words
a_new<-rep("",length(a)+length(location))
# Find the location for punctuation in a
insert_location<-location+1:length(location)
# Get vector a without punctuation
a_nopunctuation<-gsub(punctuation,"",a,fixed = TRUE)
# Insert punctuation in the returned vector
a_new[insert_location]<-punctuation
# Insert words in the returned vector
a_new[-insert_location]<-a_nopunctuation
return(a_new)
}
# Task 5
punctuation_list<-c(",",".",";","!",":","?")
for (i in punctuation_list){
# Use split_punct in a
a<-split_punct(i)
}
# Task 6
# Convert the vector to lowercase
lowercase_vector <- tolower(a)
# Find unique words
unique_vector <- unique(lowercase_vector)
# Use match() to determine indices
indices <- match(lowercase_vector,unique_vector)
# Use tabulate to count occurrences of each unique word
counts <- tabulate(indices)
# Choose the 1000th frequency as the threshold after sorted the frequencies decreasingly
threshold <- sort(counts,decreasing = TRUE)[1000]
# Create a vector b of the m most commonly occurring words (m â‰ˆ 1000)
b <- unique_vector[counts>=threshold]
# Task 7
# Create common words triplets matrix T
col_1 <- match(lowercase_vector,b)
col_2 <- match(lowercase_vector[2:length(lowercase_vector)],b)
col_3 <- match(lowercase_vector[3:length(lowercase_vector)],b)
# The number of rows are different for col_1, col_2 and col_3
# And we drop the redundant rows
t <- cbind(col_1,col_2,col_3)[1:length(col_3),]
t <- t[-which(is.na(rowSums(t))),]
# Use the same idea to create common words pairs matrix P
p <- cbind(col_1,col_2)[1:length(col_2),]
p <- p[-which(is.na(rowSums(p))),]
unique_vector
indices
counts
lowercase_vector
length(counts)
length(unique_vector)
length(lowercase_vector)
b
b[1]
counts[1]
tabulate(indices)
counts[counts>=threshold]
length(counts[counts>=threshold])
length(c('apple'))
cat("This is the start of the paragraph.\nHere is another line.\nAnd yet another line to end the paragraph.")
cat("this is output:\n",b)
